// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

const musicCollection = {

    musicAlbums: [
        { title: '69 miles', artist: 'Eminem',  year: '2010'},
        { title: 'Vorona', artist: 'Linda',  year: '1998'},
        { title: 'Breathe', artist: 'Prodigy',  year: '1997'}
    ],
    [Symbol.iterator]() {
        this.index = 0;
        return this;
    },
    next() {
        return this.index < this.musicAlbums.length
            ? {done: false, value: this.musicAlbums[this.index++]}
            : {done: true};
    }
}
for (const album of musicCollection) {
    console.log(`${album.title} - ${album.artist} (${album.year})`);
}

console.log();

// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.



// Повара и их специализации:
const chefs = new Map();
chefs.set("Виктор" , "Пицца");
chefs.set("Ольга" , "Суши");
chefs.set("Дмитрий" , "Десерты");

console.log(`Виктор - специализация: ${chefs.get("Виктор")}`);
console.log(`Ольга - специализация: ${chefs.get("Ольга")}`);
console.log(`Дмитрий - специализация: ${chefs.get("Дмитрий")}`);
console.log();


// Блюда и их повара:
const dishes = new Map();
dishes.set("Пицца 'Маргарита'" , "повар: Виктор");
dishes.set("Пицца 'Пепперони'" , "повар: Виктор");
dishes.set("Суши 'Филадельфия'" , "повар: Ольга");
dishes.set("Суши 'Калифорния'" , "повар: Ольга");
dishes.set("Тирамису" , "повар: Дмитрий");
dishes.set("Чизкейк" , "повар: Дмитрий");

console.log(`Пиццу 'Маргарита' готовит  ${dishes.get("Пицца 'Маргарита'")}`);
console.log(`Пиццу 'Пепперони' готовит  ${dishes.get("Пицца 'Пепперони'")}`);
console.log(`Суши 'Филадельфия' готовит ${dishes.get("Суши 'Филадельфия'")}`);
console.log(`Суши 'Калифорния' готовит  ${dishes.get("Суши 'Калифорния'")}`);
console.log(`Тирамису готовит ${dishes.get("Тирамису")}`);
console.log(`Чизкейк готовит ${dishes.get("Чизкейк")}`);
console.log();


// Заказы:
const orders = new Map();

let client1 = {name : "Алексей"};
let clientOrder1 = new Set();
clientOrder1.add('Пицца"Пепперони"');
clientOrder1.add('"Тирамису"');


let client2 = {name : "Мария"};
let clientOrder2 = new Set();
clientOrder2.add('Суши "Калифорния"');
clientOrder2.add('Пиццу "Маргарита"');

let client3 = {name : "Ирина"};
let clientOrder3 = new Set();
clientOrder3.add('Чизкейк');

orders.set(client1, clientOrder1);
orders.set(client2, clientOrder2);
orders.set(client3, clientOrder3);

console.log(`Клиент ${client1.name} заказал(а): ${[...orders.get(client1)]}`);
console.log(`Клиент ${client2.name} заказал(а): ${[...orders.get(client2)]}`);
console.log(`Клиент ${client3.name} заказал(а): ${[...orders.get(client3)]}`);